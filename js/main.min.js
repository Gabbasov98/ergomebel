$("._tab").click(function() {
    let parentBlock = $(this).parents("._tabs-parent")
    let tabId = $(this).attr("data-tab")
    $(parentBlock).find("._tab").removeClass("_active")
    $(this).addClass("_active")
    $(parentBlock).find(".tab-content").removeClass("_active")
    $(parentBlock).find(`.${tabId}`).addClass("_active")
})

$(".mob-delivery-tab").click(function () {
    $(this).toggleClass("_active")
    $(this).siblings(".mob-delivery-tab__content").slideToggle()
})

$(".favourite-btn,.compare-btn,.cart-btn").click(function () {
    $(this).toggleClass("_added")
})

$(document).on('click', '.rating-input__item', function(e) {
    let ratingItem = parseInt($(this).attr("data-rating-value"))
    $(this).parent(".rating-input").attr("data-total-rating", ratingItem)
    $(this).siblings(".rating-input__field").val(ratingItem)
})


function setLabelPlace(){
    let fields = document.querySelectorAll(".fg input,.fg textarea,.fg-dynamic select")

    fields.forEach(field => {
        setLabelPosition(field)

        field.onchange = ()=> {
            setLabelPosition(field)
        }

        function setLabelPosition() {
            if(field.value !== ""){
                field.classList.add("_filled")
            } else{
                field.classList.remove("_filled")
            }
        }
    })
}


setLabelPlace()

$(".qa-card").click(function () {
    $(this).toggleClass("_active")
    $(this).find(".qa-card__hidden").slideToggle()
})

$('.cartcalc').each(function (i,el) {
    let plus = $(el).find(".ccalc-plus")
    let minus = $(el).find(".ccalc-minus")
    let input = $(el).find("input")

    $(minus).click(function(e) {
        let a = $(input).val();
        if (a > 1) {
            let b = +a - 1;
            $(input).val(b);
            $(input).trigger('change');
        } else {
            $(input).val(a);
        }
        setMinusBtnClickability()
        e.stopImmediatePropagation()
    });

    $(plus).click(function(e) {
        let a = $(input).val();
        let b = +a + 1;
        $(input).val(b);
        $(input).trigger('change');
        setMinusBtnClickability(this)
        e.stopImmediatePropagation()
    });

    function setMinusBtnClickability() {
        let val = +$(input).val()
        if(val === 1){
            $(minus).addClass("_disabled")
        } else{
            $(minus).removeClass("_disabled")
        }
    }

    setMinusBtnClickability()
})

$("._toggle-menu").click(function () {
    $(".header").toggleClass("_open")
    $("body").toggleClass("fixed-body")
})

$(".nav2 .menu>li>a").click(function () {
    let imgSrc = $(this).find(".menu__icon img").attr("src")
    let title = $(this).find(".menu__title").html()

    $(".sub-menu-top__icon img").attr("src",imgSrc)
    $(".sub-menu-top__title").html(title)

    if($(this).parents("li").hasClass("_open")){
        $(this).parents(".nav2").find(".menu>li").removeClass("_open")
        $(".header").removeClass("_open-sub-menu")
    }else{
        $(this).parents(".nav2").find(".menu>li").removeClass("_open")
        $(".header").removeClass("_open-sub-menu")
        $(this).parents("li").addClass("_open")
        $(".header").addClass("_open-sub-menu")
    }
})

$(document).mouseup( function(e){
    let div = $( ".header-bottom .nav2" );
    if ( !div.is(e.target)
        && div.has(e.target).length === 0 ) {
        if($(div).find("li").hasClass("_open")){
            $(div).find("li").removeClass("_open")
        }
    }
});

// $(document).mouseup( function(e){
//     let div = $( ".catalog-modal .nav2" );
//     if ( !div.is(e.target)
//         && div.has(e.target).length === 0 ) {
//         if($(div).find("li").hasClass("_open") && $(".header").hasClass("_show-catalog")){
//             $(div).find("li").removeClass("_open")
//         }
//     }
// });


$("._close-sub-menu").click(function () {
    $(".nav2 .menu>li").removeClass("_open")
    $(".header").removeClass("_open-sub-menu")
})

$(".header-city__show").click(function () {
    $(".header-city").toggleClass("_open")
})

$(".slider").click(function () {
    $(".header-city").removeClass("_open")
})

$("._close-search-modal").click(function () {
    $(".header-city").removeClass("_show-modal")
})

$(document).mouseup( function(e){
    let div = $( ".header-city" );
    if ( !div.is(e.target)
        && div.has(e.target).length === 0 ) {
        if($(div).hasClass("_open")){
            $(div).removeClass("_open")
        }
    }
});

$("._search-field").on("input",function () {
    if($(this).val().length > 0){
        $(".header-search").addClass("_show-result")
    } else{
        $(".header-search").removeClass("_show-result")
    }
})

$(".header-search__clear").click(function () {
    $('._search-field').val("").trigger("input");
    $('._search-field').val("").trigger("change");
})

function Sliders() {
    let SlidersArray = []

    let sliders = document.querySelectorAll(".slider")
    sliders.forEach((slider,index) => {
        slider.setAttribute("data-slider-id",index)
        let isLoop = slider.classList.contains("_loop")
        let isNested = slider.classList.contains("_nested")

        SlidersArray[index] = new Swiper(`.slider[data-slider-id="${index}"] .swiper-container`, {
            slidesPerView: "auto",
            spaceBetween: 0,
            watchSlidesProgress: true,
            preventClicks :true,
            a11y: false,
            observer: true,
            observeParents: true,
            observeSlideChildren: true,
            loop: isLoop,
            nested: isNested,
            speed: 700,
            navigation: {
                nextEl: `.slider[data-slider-id="${index}"] .swiper-button-next`,
                prevEl: `.slider[data-slider-id="${index}"] .swiper-button-prev`,
            },
            pagination: {
                el: `.slider[data-slider-id="${index}"] .swiper-pagination`,
                type: 'bullets',
                clickable: true,
            },
        })
    })
}

function gallery() {
    let SlidersArray = []

    let sliders = document.querySelectorAll(".gallery")
    sliders.forEach((slider,index) => {
        slider.setAttribute("data-slider-id",index)
        let gallery = {
            mySwiper: {},
            mySwiper2: {}
        }

        gallery.mySwiper = new Swiper(`.gallery[data-slider-id="${index}"] .mySwiper`, {
            spaceBetween: 0,
            slidesPerView: "auto",
            freeMode: true,
            watchSlidesProgress: true,
        });
        gallery.mySwiper2 = new Swiper(`.gallery[data-slider-id="${index}"] .mySwiper2`, {
            spaceBetween: 0,
            loop: true,
            navigation: {
                nextEl: `.gallery[data-slider-id="${index}"] .swiper-button-next`,
                prevEl: `.gallery[data-slider-id="${index}"] .swiper-button-prev`,
            },
            pagination: {
                el: `.gallery[data-slider-id="${index}"] .swiper-pagination`,
                type: 'bullets',
                clickable: true,
            },
            thumbs: {
                swiper:  gallery.mySwiper,
            },
        });

        SlidersArray[index] = gallery
    })
}

function productSliders() {
    let SlidersArray = []

    let sliders = document.querySelectorAll(".collection-slider")
    sliders.forEach((slider,index) => {
        slider.setAttribute("data-slider-id",index)
        let isLoop = slider.classList.contains("_loop")

        SlidersArray[index] = new Swiper(`.collection-slider[data-slider-id="${index}"] .collection-slider__container`, {
            wrapperClass: "collection-slider__wrapper",
            slideClass: "collection-slider__slide",
            slidesPerView: "auto",
            spaceBetween: 0,
            watchSlidesProgress: true,
            preventClicks :true,
            a11y: false,
            observer: true,
            observeParents: true,
            observeSlideChildren: true,
            loop: isLoop,
            speed: 700,
            navigation: {
                nextEl: `.collection-slider[data-slider-id="${index}"] .collection-slider__nav .swiper-button-next`,
                prevEl: `.collection-slider[data-slider-id="${index}"] .collection-slider__nav .swiper-button-prev`,
            },
        })
    })
}


Sliders()
gallery()
productSliders()

$(".info__more").click(function () {
    $(this).parents(".info").toggleClass("_show-all")
})

$(".m-dropdown__show").click(function () {
    // $(this).parents(".sort").toggleClass("_open")
    if($(this).parents(".m-dropdown").hasClass("_open")){
        $(".m-dropdown").removeClass("_open")
    } else{
        $(".m-dropdown").removeClass("_open")
        $(this).parents(".m-dropdown").addClass("_open")
    }
})

$(".m-dropdown__options input").change(function () {
    let value = $(this).attr("data-value")
    $(this).parents(".m-dropdown").find(".m-dropdown__current").html(value)
    $(this).parents(".m-dropdown").addClass("_selected")
    $(this).parents(".m-dropdown").removeClass("_open")
})

$(document).mouseup( function(e){
    let div = $( ".m-dropdown" );
    if ( !div.is(e.target)
        && div.has(e.target).length === 0 ) {
        if($(div).hasClass("_open")){
            $(div).removeClass("_open")
        }
    }
});

$(".filter .filter-item").each(function (i,filter) {
    let toggleBtn = $(filter).find(".m-dropdown__show")
    let inputs = $(filter).find("input")

    $(toggleBtn).click(function () {
        if($(filter).hasClass("_open")){
            $(".m-dropdown").removeClass("_open")
        } else{
            $(".m-dropdown").removeClass("_open")
            $(filter).addClass("_open")
        }
    })

    $(inputs).change(function () {
        isSelected()
    })

    function isSelected() {
        let checkedInputs = $(filter).find(".m-check input:checked")

        if(checkedInputs.length !== 0){
            $(filter).addClass("_selected")
            $(".filter__all input").prop("checked",false)
        }else{
            $(filter).removeClass("_selected")
        }
    }

    $(".m-dropdown__clear").click(function () {
        $(inputs).each(function (i,input) {
            $(input).prop("checked",false)
        })
        $(filter).removeClass("_selected")
    })
})

$(".filter__all input").change(function () {
    let isChecked = $(this).prop("checked")
    if(isChecked){
        $(".filter .m-dropdown__options input").each(function (i,input) {
            $(input).prop("checked",false)
            $(input).trigger('change');
        })
    }
})

$(".filter2-group__top").click(function () {
    $(this).parents(".filter2-group").toggleClass("_active")
    $(this).siblings(".filter2-group__bottom").slideToggle()
})

$(".filter2-group__more").click(function () {
    $(this).parents(".filter2-group").toggleClass("_show-all-checks")
})

let filterSliders = document.querySelectorAll(".filter-slider")

filterSliders.forEach(slider => {
    const rangeSlider = slider.querySelector(`.range-slider`)
    const rangeOutput0 = slider.querySelector(`.range-slider__output1`)
    const rangeOutput1 = slider.querySelector(`.range-slider__output2`)
    const rangeOutputs = [rangeOutput0, rangeOutput1]

    let startValue1 = +slider.getAttribute("data-start")
    let startValue2 = +slider.getAttribute("data-start2")
    let min = +slider.getAttribute("data-min")
    let max = +slider.getAttribute("data-max")

    if (rangeSlider) {
        noUiSlider.create(rangeSlider, {
            start: [startValue1, startValue2],
            connect: true,
            step: 1,
            range: {
                'min': min,
                'max': max
            }
        });
    }
    if (rangeSlider) {
        rangeSlider.noUiSlider.on('update', function(values, handle) {
            rangeOutputs[handle].innerHTML = Math.round(values[handle])
        })
    }
})

$(".catalog-view__tab").click(function () {
    let viewType = $(this).attr("data-tab")
    console.log(viewType)
    $(".catalog-view__tab").removeClass("_active")
    $(this).addClass("_active")

    if(viewType === "_row"){
        $(".catalog").addClass("_row-view")
    } else{
        $(".catalog").removeClass("_row-view")
    }
})


$(".colors__more").click(function () {
    $(this).parents(".colors").toggleClass("_show-all")
})

let maps = document.querySelectorAll("[data-cord1]")
ymaps.ready(init);
let coord = []

function init() {
    maps.forEach(map=> {
        createMap(map)
    })

    function createMap(map){
        let cord = [+map.dataset.cord1, +map.dataset.cord2]

        let myMap = new ymaps.Map(map, {
            center: cord,
            zoom: 18,
            controls: []
        });

        myMap.controls.add('zoomControl');

        myMap.behaviors.disable('scrollZoom');
        let placeMark = new ymaps.Placemark(cord, {},
            {
                iconLayout: 'default#image',
                iconImageHref: "img/mark.svg",
                iconImageSize: [48, 60],
                iconImageOffset: [-24, -30]
            }
        );
        myMap.geoObjects.add(placeMark);

        placeMark.events.add(['click'], (e) => {
            let modal = $(".map-modal._active")
            if(modal){
                $(modal).find(".contacts-info").toggleClass("_active")
            }
        })
    }





}

$(".contacts-info__close").click(function () {
    $(this).parents(".contacts-info").removeClass("_active")
})

$("._show-contact-map").click(function () {
    let id = $(this).attr("data-map-id")
    $(`#${id} .contacts-info`).addClass("_active")
    openModal(id)
})

$(".file-input input").change(function (e) {
    const [file] = e.target.files
    let fileName = file.name
    let fileContainer = $(this).parents(".file-input")

    $(fileContainer).append(
        `
        <div class="file-input__output">
            <span class="file-input__name">
                ${fileName}
            </span>
            <button type="button" class="file-input__delete">
                Удалить
            </button>
        </div>
        `
    )

    $(".file-input__delete").click(function () {
        let parent = $(this).parents(".file-input")
        clearFileInput(parent)
    })
})


function clearFileInput(parent) {
    $(parent).find(".file-input input").val('')
    $(parent).find(".file-input__output").remove()
}

function formatTimerItems(num){
    num = num.toString().split('')
    let renderElements = `
    
    `
    num.forEach(el => {
        renderElements += `
        <span class="countdown__item"><span>${el}</span></span>
        `
    })

    return renderElements
}

$(function(){
    $.fn.extend({
        countdown: function(props){
            props = jQuery.extend({ //Default props
                until: new Date(),
            }, props);
            const state = {
                days: 0,
                hours: 0,
                minutes: 0,
                seconds: 0
            };
            let render = (props) => {
                const { days, hours, minutes, seconds } = props;
                this.empty();
                this.append(`
        <div class="countdownProp _days" date-count="${days == 1 ? 'day' : 'days'}">
            <div class="countdownProp__item">
                <span class="countdownProp__num">${formatTimerItems(days)}</span>
                <span class="countdownProp__title">день</span>
            </div> 
            <span class="_dots">:</span> 
        </div>
        <div class="countdownProp" date-count="${hours == 1 ? 'hour' : 'hours'}">
            <div class="countdownProp__item">
                <span class="countdownProp__num">${hours < 10 ? formatTimerItems('0' + hours) : formatTimerItems(hours)}</span> 
                <span class="countdownProp__title">час</span> 
            </div>
            <span class="_dots">:</span> 
        </div>
        <div class="countdownProp" date-count="${minutes == 1 ? 'minute' : 'minutes'}">
            <div class="countdownProp__item">
                <span class="countdownProp__num">${minutes < 10 ? formatTimerItems('0' + minutes) : formatTimerItems(minutes)}</span> 
                <span class="countdownProp__title">мин</span> 
            </div>
            <span class="_dots">:</span> 
        </div>
        <div class="countdownProp" date-count="${seconds == 1 ? 'second' : 'seconds'}">
            <div class="countdownProp__item">
                <span class="countdownProp__num">${seconds < 10 ? formatTimerItems('0' + seconds) : formatTimerItems(seconds)}</span> 
                <span class="countdownProp__title">сек</span>
            </div>
        </div>
        `);
            }
            render(state);
            let update = setInterval(function(){
                let counter = props.until - (new Date().getTime());
                if (counter <= 0) {
                    clearInterval(update);
                    return false;
                }
                state.days = Math.floor(counter / (1000 * 60 * 60 * 24));
                state.hours = Math.floor((counter % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                state.minutes = Math.floor((counter % (1000 * 60 * 60)) / (1000 * 60));
                state.seconds = Math.floor((counter % (1000 * 60)) / 1000);
                render(state);
            }, 1000);
            return this;
        },
        snow: function(props){
            props = jQuery.extend({ //Default props
                amount: 60
            }, props);
            let random = (min, max) => {
                return Math.random() * (max - min) + min;
            }
            let svg = '<svg class="snow" xmlns="http://www.w3.org/2000/svg">';
            for (let index = 0; index < props.amount; index++) {
                svg += `<circle class="particle" r="${random(1, 3)}" cx="${random(1, 100)}%" cy="-${random(1, 100)}" />`;
            }
            svg += '</svg>';
            this.replaceWith(svg);
        }
    })

    const now = new Date();
    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
    const finalDay = 31;
    const finalMonth = 6;
    const currentDay = now.getDate();
    const currentMonth = now.getMonth();
    const counterYear = ((currentDay >= finalDay) && (currentMonth + 1 === finalMonth)) ? now.getFullYear() + 1 : now.getFullYear();
    $('.countdown').countdown({
        until: new Date(`${months[finalMonth - 1]}, ${finalDay}, ${counterYear}`) // you can add time optionally ('Dec, 25, 2020 00:00:00')
    })
    $('.snow').snow({
        amount: 100 //Number of particles
    });
});

$(".catalog-props .more-btn").click(function () {
    $(this).parents(".catalog-props").toggleClass("_show-all")
})
$(".catalog-desc .more-btn").click(function () {
    $(this).parents(".catalog-desc").toggleClass("_show-all")
})

$(".review-card__more").click(function () {
    $(this).parents(".review-card").toggleClass("_show-all")
})

$(".product-item__point").click(function () {
    if($(this).parents(".product-item").hasClass("_open")){
        $(".product-item").removeClass("_open")
    } else{
        $(".product-item").removeClass("_open")
        $(this).parents(".product-item").addClass("_open")
    }
})

$(".product-item__back").click(function () {
    $(".product-item").removeClass("_open")
})

$(".rating-block").each(function (i,el) {
    let value = +$(el).attr("data-rating") / 5 * 100

    $(el).find(".rating__fill").css("width", `${value}%`)
    $(el).find(".rating-block__num").html($(el).attr("data-rating"))

    let stars = $(el).find(".rating")

    $(stars).mousemove(function (e) {
        let percent = e.offsetX / $(this).outerWidth() * 100;
        $(el).find(".rating__fill").css("width", `${percent}%`)
    })

    $(stars).mouseleave(function (e) {
        let value = +$(el).attr("data-rating") / 5 * 100
        $(el).find(".rating__fill").css("width", `${value}%`)
        $(el).find(".rating-block__num").html($(el).attr("data-rating"))
    })

    $(stars).click(function (e) {
        let percent = e.offsetX / $(this).outerWidth() * 100;
        $(el).attr("data-rating",(percent * 5 / 100).toFixed(1))
        $(el).find(".rating-block__num").html($(el).attr("data-rating"))
    })
})

$(".cart-colors__show").click(function () {
    $(this).parents(".cart-colors").toggleClass("_active")
    $(this).siblings(".cart-colors__hidden").slideToggle()
})

$(".cart-card__mob-nav-btn").click(function () {
    $(this).parents(".cart-card").toggleClass("_active")
    $(this).parents(".cart-card").find(".cart-card__mob-hide").slideToggle()
})

$("._toggle-order-modal").click(function () {
    $(".order-modal").toggleClass("_open")
    $("body").toggleClass("fixed-body")
})

$(".cart-map__search input").on("input",function () {
    if($(this).val().length > 3){
        $(this).parents(".cart-map__search").addClass("_show")
    }
})

$(document).mouseup( function(e){
    let div = $( ".cart-map__search" );
    if ( !div.is(e.target)
        && div.has(e.target).length === 0 ) {
        if($(div).hasClass("_show")){
            $(div).removeClass("_show")
        }
    }
});

$('[name="reqType"]').change(function () {
    let value = $(this).attr("data-value")
    $(".order-requisites__view").removeClass("_active")
    $(`.order-requisites__view.${value}`).addClass("_active")
})

$('[name="deliveryTariff"],[name="deliveryTarget"]').change(function () {
    let value = $(this).attr("data-value")
    $(this).parents(".delivery-type").find(".delivery-tariff__view").removeClass("_active")
    $(this).parents(".delivery-type").find(`.delivery-tariff__view.${value}`).addClass("_active")
})

$('[name="deliveryType"]').change(function () {
    let value = $(this).attr("data-value")
    $(".delivery-type").removeClass("_active")
    $(`.delivery-type.${value}`).addClass("_active")
})

$('[name="userType"]').change(function () {
    let value = $(this).attr("data-value")
    $("._user-type-fields").removeClass("_active")
    $(`._user-type-fields.${value}`).addClass("_active")
})

let body = document.querySelector("body")
let modalTogglers = document.querySelectorAll("[data-modal]")
let modals = document.querySelectorAll(".modal")

modalTogglers.forEach(el => {
    el.onclick = function () {
        let modalId = el.getAttribute("data-modal")
        openModal(modalId)
    }
})

function closeModals() {
    modals.forEach(modal => {
        modal.classList.remove("_active")
        body.classList.remove("fixed-body2")
    })
}

function openModal(modalId) {
    closeModals()
    let modal = document.querySelector(`#${modalId}`)
    let closeButtons = modal.querySelectorAll(`._close-modal`)

    modal.classList.add("_active")
    body.classList.add("fixed-body2")


    closeButtons.forEach(btn => {
        btn.onclick = ()=> {
            modal.classList.remove("_active")
            body.classList.remove("fixed-body2")
        }
    })
}

var getScrollBarSize = (function() {
    var el = window.document.createElement('textarea'), style = {
        'visibility': 'hidden', 'position': 'absolute', 'zIndex': '-2147483647',
        'top': '-1000px', 'left': '-1000px', 'width': '1000px', 'height': '1000px',
        'overflow': 'scroll', 'margin': '0', 'border': '0', 'padding': '0'
    }, support = el.clientWidth !== undefined && el.offsetWidth !== undefined;

    for (var key in style) {
        if (style.hasOwnProperty(key)) {
            el.style[key] = style[key];
        }
    }

    return function() {
        var size = null;
        if (support && window.document.body) {
            window.document.body.appendChild(el);
            size = [el.offsetWidth - el.clientWidth, el.offsetHeight - el.clientHeight];
            window.document.body.removeChild(el);
        }

        document.documentElement.style.setProperty('--scrollWidth', `${size[0]}px`);
        return size;
    };
})();


function isInViewport(element) {
    const rect = element.getBoundingClientRect();
    return (
        rect.top >= 0 &&
        rect.left >= 0 &&
        rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&
        rect.right <= (window.innerWidth || document.documentElement.clientWidth)
    );
}

const numbers = document.querySelectorAll('.js-animate-number');
numbers.forEach(number => {
    let num = number.textContent;
    number.setAttribute("num", num);
    number.textContent = '0';
    const speed = +number.getAttribute("data-speed");

    ['scroll','DOMContentLoaded'].forEach( evt =>
        document.addEventListener(evt, function () {
            if(isInViewport(number)==1){
                const animate = () => {
                    const outerValue = +number.getAttribute('num');
                    const innerValue = +number.innerText;
                    const time = outerValue / speed;
                    if(innerValue < outerValue) {
                        number.innerText = Math.ceil(innerValue+time).toLocaleString();
                        setTimeout(animate, 1);
                    }else{
                        number.innerText = outerValue.toLocaleString();
                    }
                }
                animate();
            }}, {
            passive: true
        })
    );

})

var BACKSPACE_KEY = 8;
var ENTER_KEY = 13;
var TAB_KEY = 9;
var LEFT_KEY = 37;
var RIGHT_KEY = 39;
var ZERO_KEY = 48;
var NINE_KEY = 57;

function otp(elementId) {
    var inputs = document.querySelectorAll('.js-otp-input');
    var callback = null;

    function init(completeCallback) {
        callback = completeCallback;
        for (i = 0; i < inputs.length; i++) {
            registerEvents(i, inputs[i]);
        }
    }

    function destroy() {
        for (i = 0; i < inputs.length; i++) {
            registerEvents(i, inputs[i]);
        }
    }

    function registerEvents(index, element) {
        element.addEventListener("input", function(ev) {
            onInput(index, ev);
        });
        element.addEventListener("paste", function(ev) {
            onPaste(index, ev);
        });
        element.addEventListener("keydown", function(ev) {
            onKeyDown(index, ev);
        });
    }

    function onPaste(index, ev) {
        ev.preventDefault();
        var curIndex = index;
        var clipboardData = ev.clipboardData || window.clipboardData;
        var pastedData = clipboardData.getData("Text");
        for (i = 0; i < pastedData.length; i++) {
            if (i < inputs.length) {
                if (!isDigit(pastedData[i])) break;
                inputs[curIndex].value = pastedData[i];
                curIndex++;
            }
        }
        if (curIndex == inputs.length) {
            inputs[curIndex - 1].focus();
            callback(retrieveOTP());
        } else {
            inputs[curIndex].focus();
        }
    }

    function onKeyDown(index, ev) {
        var key = ev.keyCode || ev.which;
        if (key == LEFT_KEY && index > 0) {
            ev.preventDefault(); // prevent cursor to move before digit in input
            inputs[index - 1].focus();
        }
        if (key == RIGHT_KEY && index + 1 < inputs.length) {
            ev.preventDefault();
            inputs[index + 1].focus();
        }
        if (key == BACKSPACE_KEY && index > 0) {
            if (inputs[index].value == "") {
                // Empty and focus previous input and current input is empty
                inputs[index - 1].value = "";
                inputs[index - 1].focus();
            } else {
                inputs[index].value = "";
            }
        }
        if (key == ENTER_KEY) {
            // force submit if enter is pressed
            ev.preventDefault();
            if (isOTPComplete()) {
                callback(retrieveOTP());
            }
        }
        if (key == TAB_KEY && index == inputs.length - 1) {
            // force submit if tab pressed on last input
            ev.preventDefault();
            if (isOTPComplete()) {
                callback(retrieveOTP());
            }
        }
    }

    function onInput(index, ev) {
        var value = ev.data || ev.target.value;
        var curIndex = index;
        for (i = 0; i < value.length; i++) {
            if (i < inputs.length) {
                if (!isDigit(value[i])) {
                    inputs[curIndex].value = "";
                    break;
                }
                inputs[curIndex++].value = value[i];
                if (curIndex == inputs.length) {
                    if(isOTPComplete()) {
                        callback(retrieveOTP());
                    }
                } else {
                    inputs[curIndex].focus();
                }
            }
        }
    }

    function retrieveOTP() {
        var otp = "";
        for (i = 0; i < inputs.length; i++) {
            otp += inputs[i].value;
        }
        return otp;
    }

    function isDigit(d) {
        return d >= "0" && d <= "9";
    }

    function isOTPComplete() {
        var isComplete = true;
        var i = 0;
        while (i < inputs.length && isComplete) {
            if (inputs[i].value == "") {
                isComplete = false;
            }
            i++;
        }
        return isComplete;
    }

    return {
        init: init
    };
}

var otpModule = otp("otp-inputs");
otpModule.init(function(passcode) {});

$(".appeal-card__btn").click(function () {
    let parent = $(this).parents(".appeal-item")
    $(parent).toggleClass("_open")
    $(parent).find(".appeal-card__bottom").slideToggle()
    $(parent).find(".appeal-item__messages").slideToggle()
})

window.addEventListener('DOMContentLoaded', () => {
    fix100vh();
    window.addEventListener('resize', () => {
        fix100vh();
        getScrollBarSize()
    })

    getScrollBarSize()

    $('input[type="tel"]').mask('+7 (999) 999-99-99', { autoclear: false }, { placeholder: '+7 (   )    -  -  ' });
})

function fix100vh() {
    let vh = window.innerHeight * 0.01;
    document.documentElement.style.setProperty('--vh', `${vh}px`);
}

$(".catalog-btn").click(function () {
    $(".header-city").removeClass("_show-modal")
    $(".catalog-modal").toggleClass("_active")
    // $( ".catalog-modal .menu>li:first-child" ).addClass("_open")
    $(".header").toggleClass("_show-catalog")
    $("body").toggleClass("fixed-body")
})

$(".catalog-modal .close-btn").click(function () {
    $(".catalog-modal").removeClass("_active")
    $(".header").removeClass("_show-catalog")
    $("body").removeClass("fixed-body")
})

$(document).mouseup( function(e){
    let div = $( ".catalog-modal" );
    if ( !div.is(e.target)
        && div.has(e.target).length === 0 ) {
        if($(div).hasClass("_active")){
            $(div).removeClass("_active")
            $(".header").removeClass("_show-catalog")
        }
    }
});

//# sourceMappingURL=../sourcemaps/main.min.js.map
